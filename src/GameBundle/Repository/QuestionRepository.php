<?php

namespace GameBundle\Repository;

/**
 * QuestionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class QuestionRepository extends \Doctrine\ORM\EntityRepository
{
    public function getQuestionsByValidity($validity) {
        return $this->createQueryBuilder('q')
            ->leftJoin('q.topic', 't')
            ->leftJoin('q.userCount', 'u')
            ->leftJoin('t.subject', 'su')
            ->leftJoin('q.schoolClass', 'sc')
            ->addSelect('t')
            ->addSelect('u')
            ->addSelect('su')
            ->addSelect('sc')
            ->where('q.isValid = :isValid')
            ->setParameter('isValid', $validity)
            ->orderBy('q.schoolClass', 'ASC')
            ->getQuery()
            ->getArrayResult()
		;
    }

    public function getQuestionById($id) {
        return $this->createQueryBuilder('q')
            ->leftJoin('q.topic', 't')
            ->leftJoin('q.userCount', 'u')
            ->leftJoin('q.schoolClass', 's')
            ->addSelect('t')
            ->addSelect('u')
            ->addSelect('s')
            ->where('q.id = :id')
            ->setParameter('id', $id)
            ->getQuery()
            ->getSingleResult()
		;
    }

    public function getQuestionBySubject($subject) {
        return $this->createQueryBuilder('q')
            ->leftJoin('q.topic', 't')
            ->leftJoin('t.subject', 's')
            ->addSelect('t')
            ->addSelect('s')
            ->where('t.subject = :subject')
            ->setParameter('subject', $subject)
            ->getQuery()
            ->getResult()
		;
    }

    public function getRandomQuestionBySubject($subject, $schoolLevel, $idQuestionList) {
        $randomId = array_rand($idQuestionList, 1);
        
        $qb = $this->createQueryBuilder('q');
        return $qb
            ->leftJoin('q.topic', 't')
            ->leftJoin('t.subject', 'su')
            ->leftJoin('q.answers', 'a')
            ->leftJoin('q.schoolClass', 'sc')
            ->addSelect('t')
            ->addSelect('su')
            ->addSelect('a')
            ->addSelect('sc')
            ->where('t.subject = :subject')
            ->andWhere('q.id = :randomId')
            ->andWhere('q.schoolClass = :schoolLevel')
            ->andWhere('q.isValid = :isValid')            
            ->setParameter('subject', $subject)
            ->setParameter('randomId', $idQuestionList[$randomId])
            ->setParameter('schoolLevel', $schoolLevel)
            ->setParameter('isValid', true)
            ->getQuery()
            ->getArrayResult()[0]
        ;
    }

    public function findMyQuestions($userCount, $validity) {
        return $this->createQueryBuilder('q')
            ->leftJoin('q.topic', 't')
            ->leftJoin('q.userCount', 'u')
            ->leftJoin('q.schoolClass', 's')
            ->addSelect('t')
            ->addSelect('u')
            ->addSelect('s')
            ->where('q.userCount = :userCount')
            ->andWhere('q.isValid = :isValid')
            ->setParameter('userCount', $userCount)
            ->setParameter('isValid', $validity)
            ->getQuery()
            ->getResult()
		;
    }

    // public function getQuestionsBySchoolClass($schoolClass) {
    //     return $this->createQueryBuilder('q')
    //         ->leftJoin('q.schoolClass', 'sc')
    //         ->addSelect('sc')
    //         ->where('q.isValid = :isValid')
    //         ->andWhere('sc.schoolClass = :schoolClass')
    //         ->setParameter('isValid', true)
    //         ->setParameter('schoolClass', $schoolClass)
    //         ->getQuery()
    //         ->getResult()
	// 	;
    // }

}
